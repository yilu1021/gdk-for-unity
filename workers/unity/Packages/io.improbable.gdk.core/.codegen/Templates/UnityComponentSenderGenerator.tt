<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";
    var profilingStart = $"Profiler.BeginSample(\"{componentDetails.ComponentName}\");";
    var profilingEnd = "Profiler.EndSample();";
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Profiling;
using Unity.Mathematics;
using Unity.Entities;
using Unity.Collections;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.CodegenAdapters;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        internal class ComponentReplicator : IComponentReplicationHandler
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;

            public EntityQueryDesc ComponentUpdateQuery => new EntityQueryDesc
            {
                All = new[]
                {
                    ComponentType.ReadWrite<<#= componentNamespace #>.Component>(),
                    ComponentType.ReadOnly<<#= componentNamespace #>.Authoritative>(),
                    ComponentType.ReadOnly<SpatialEntityId>()
                },
            };

            public void SendUpdates(
                NativeArray<ArchetypeChunk> chunkArray,
                ComponentSystemBase system,
                EntityManager entityManager,
                ComponentUpdateSystem componentUpdateSystem)
            {
                <#= profilingStart #>

                var spatialOSEntityType = system.GetArchetypeChunkComponentType<SpatialEntityId>(true);
                var componentType = system.GetArchetypeChunkComponentType<<#= componentNamespace #>.Component>();

                foreach (var chunk in chunkArray)
                {
                    var entityIdArray = chunk.GetNativeArray(spatialOSEntityType);
                    var componentArray = chunk.GetNativeArray(componentType);

                    for (var i = 0; i < componentArray.Length; i++)
                    {
                        var data = componentArray[i];
                        if (data.IsDataDirty())
                        {
                            Update update = new Update();
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>

                            if (data.IsDataDirty(<#= i #>))
                            {
                                update.<#= fieldDetails.PascalCaseName #> = data.<#= fieldDetails.PascalCaseName #>;
                            }
<# } #>

                            componentUpdateSystem.SendUpdate(in update, entityIdArray[i].EntityId);
                            data.MarkDataClean();
                            componentArray[i] = data;
                        }
                    }
                }

                <#= profilingEnd #>
            }
        }
    }
}
