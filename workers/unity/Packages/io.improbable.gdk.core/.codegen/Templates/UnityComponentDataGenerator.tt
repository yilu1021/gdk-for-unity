<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";
#>
<#= generatedHeader #>

using Improbable.Gdk.Core;
using Improbable.Worker.CInterop;
using System;
using System.Collections.Generic;
using Unity.Entities;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName  #>
    {
        public const uint ComponentId = <#= componentDetails.ComponentId #>;

        public struct Component : IComponentData, ISpatialComponentData, ISnapshottable<Snapshot>
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;

            // Bit masks for tracking which component properties were changed locally and need to be synced.
            // Each byte tracks 8 component properties.
<# for (var i = 0; i < (fieldDetailsList.Count / 8) + 1; i++) { #>
            private byte dirtyBits<#= i #>;
<# } #>

            public bool IsDataDirty()
            {
                var isDataDirty = false;
<# for (var i = 0; i < (fieldDetailsList.Count / 8) + 1; i++) { #>
                isDataDirty |= (dirtyBits<#= i #> != 0x0);
<# } #>
                return isDataDirty;
            }

            /*
            The propertyIndex argument counts up from 0 in the order defined in your schema component.
            It is not the schema field number itself. For example:
            component MyComponent
            {
                id = 1337;
                bool val_a = 1;
                bool val_b = 3;
            }
            In that case, val_a corresponds to propertyIndex 0 and val_b corresponds to propertyIndex 1 in this method.
            This method throws an InvalidOperationException in case your component doesn't contain properties.
            */
            public bool IsDataDirty(int propertyIndex)
            {
<# if (fieldDetailsList.Count == 0) { #>
                throw new InvalidOperationException("IsDataDirty(int propertyIndex) may not be called on components with no properties.");
<# } else { #>
                if (propertyIndex < 0 || propertyIndex >= <#= fieldDetailsList.Count #>)
                {
                    throw new ArgumentException("\"propertyIndex\" argument out of range. Valid range is [0, <#= fieldDetailsList.Count  - 1#>]. " +
                        "Unless you are using custom component replication code, this is most likely caused by a code generation bug. " +
                        "Please contact SpatialOS support if you encounter this issue.");
                }

                // Retrieve the dirtyBits[0-n] field that tracks this property.
                var dirtyBitsByteIndex = propertyIndex / 8;
                switch (dirtyBitsByteIndex)
                {
<# for (var i = 0; i < (fieldDetailsList.Count / 8) + 1; i++) { #>
                    case <#= i #>:
                        return (dirtyBits<#= i #> & (0x1 << propertyIndex % 8)) != 0x0;
<# } #>
                }

                return false;
<# } #>
            }

            // Like the IsDataDirty() method above, the propertyIndex arguments starts counting from 0.
            // This method throws an InvalidOperationException in case your component doesn't contain properties.
            public void MarkDataDirty(int propertyIndex)
            {
<# if (fieldDetailsList.Count == 0) { #>
                throw new InvalidOperationException("MarkDataDirty(int propertyIndex) may not be called on components with no properties.");
<# } else { #>
                if (propertyIndex < 0 || propertyIndex >= <#= fieldDetailsList.Count #>)
                {
                    throw new ArgumentException("\"propertyIndex\" argument out of range. Valid range is [0, <#= fieldDetailsList.Count  - 1#>]. " +
                        "Unless you are using custom component replication code, this is most likely caused by a code generation bug. " +
                        "Please contact SpatialOS support if you encounter this issue.");
                }

                // Retrieve the dirtyBits[0-n] field that tracks this property.
                var dirtyBitsByteIndex = propertyIndex / 8;
                switch (dirtyBitsByteIndex)
                {
<# for (var i = 0; i < (fieldDetailsList.Count / 8) + 1; i++) { #>
                    case <#= i #>:
                        dirtyBits<#= i #> |= (byte) (0x1 << propertyIndex % 8);
                        break;
<# } #>
                }
<# } #>
            }

            public void MarkDataClean()
            {
<# for (var i = 0; i < (fieldDetailsList.Count / 8) + 1; i++) { #>
                dirtyBits<#= i #> = 0x0;
<# } #>
            }

            public Snapshot ToComponentSnapshot(global::Unity.Entities.World world)
            {
                var componentDataSchema = new ComponentData(<#= componentDetails.ComponentId #>, SchemaComponentData.Create());
                Serialization.SerializeComponent(this, componentDataSchema.SchemaData.Value.GetFields(), world);
                var snapshot = Serialization.DeserializeSnapshot(componentDataSchema.SchemaData.Value.GetFields());

                componentDataSchema.SchemaData?.Destroy();
                componentDataSchema.SchemaData = null;

                return snapshot;
            }
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>
<# if (fieldDetails.IsBlittable) { #>

            private <#= fieldDetails.Type #> <#= fieldDetails.CamelCaseName #>;

            public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>
            {
                get => <#= fieldDetails.CamelCaseName #>;
                set
                {
                    MarkDataDirty(<#= i #>);
                    this.<#= fieldDetails.CamelCaseName #> = value;
                }
            }
<# } else { #>

            internal uint <#= fieldDetails.CamelCaseName #>Handle;

            public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>
            {
                get => global::<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Get(<#= fieldDetails.CamelCaseName #>Handle);
                set
                {
                    MarkDataDirty(<#= i #>);
                    global::<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Set(<#= fieldDetails.CamelCaseName #>Handle, value);
                }
            }
<# } #>
<# } #>
        }

        public struct Authoritative : IComponentData
        {
        }

        [global::System.Serializable]
        public struct Snapshot : ISpatialComponentSnapshot
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;

<# foreach(var fieldDetails in fieldDetailsList) { #>
            public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>;
<# } #>
<# if (fieldDetailsList.Count > 0) { #>

            public Snapshot(<#= GetConstructorArgs() #>)
            {
<# foreach(var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.PascalCaseName #> = <#= fieldDetails.CamelCaseName #>;
<# } #>
            }
<# } #>
        }

        public static class Serialization
        {
            public static void SerializeComponent(<#= componentNamespace #>.Component component, global::Improbable.Worker.CInterop.SchemaObject obj, global::Unity.Entities.World world)
            {
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>
                <#= fieldDetails.GetSerializationString("component." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
            }

            public static void SerializeUpdate(<#= componentNamespace #>.Component component, global::Improbable.Worker.CInterop.SchemaComponentUpdate updateObj)
            {
                var obj = updateObj.GetFields();
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>
                if (component.IsDataDirty(<#= i #>))
                {
                    <#= fieldDetails.GetSerializationString("component." + fieldDetails.PascalCaseName, "obj", 5) #>
<# if (ShouldGenerateClearedFieldsSet()) { #>
                    <#= fieldDetails.GetTrySetClearedFieldString("component." + fieldDetails.PascalCaseName, "updateObj", 5) #>
<# } #>
                }

<# } #>
            }

            public static void SerializeUpdate(<#= componentNamespace #>.Update update, global::Improbable.Worker.CInterop.SchemaComponentUpdate updateObj)
            {
                var obj = updateObj.GetFields();
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>
                {
                    if (update.<#= fieldDetails.PascalCaseName #>.HasValue)
                    {
                        var field = update.<#= fieldDetails.PascalCaseName #>.Value;
                        <#= fieldDetails.GetSerializationString("field", "obj", 6) #>
<# if (ShouldGenerateClearedFieldsSet()) { #>
                        <#= fieldDetails.GetTrySetClearedFieldString("field", "updateObj", 6) #>
<# } #>
                    }
                }
<# } #>
            }

            public static void SerializeSnapshot(<#= componentNamespace #>.Snapshot snapshot, global::Improbable.Worker.CInterop.SchemaObject obj)
            {
<# for (var i = 0; i < fieldDetailsList.Count; i++) {
var fieldDetails = fieldDetailsList[i]; #>
                <#= fieldDetails.GetSerializationString("snapshot." + fieldDetails.PascalCaseName, "obj", 4) #>

<# } #>
            }

            public static <#= componentNamespace #>.Component Deserialize(global::Improbable.Worker.CInterop.SchemaObject obj, global::Unity.Entities.World world)
            {
                var component = new <#= componentNamespace #>.Component();

<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                component.<#= fieldDetails.CamelCaseName#>Handle = global::<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Allocate(world);
<# } #>
                <#= fieldDetails.GetDeserializeString("component." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
                return component;
            }

            public static <#= componentNamespace #>.Update DeserializeUpdate(global::Improbable.Worker.CInterop.SchemaComponentUpdate updateObj)
            {
                var update = new <#= componentNamespace #>.Update();
                var obj = updateObj.GetFields();

<# foreach (var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.GetDeserializeUpdateIntoUpdateString("update." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
                return update;
            }

            public static <#= componentNamespace #>.Update DeserializeUpdate(global::Improbable.Worker.CInterop.SchemaComponentData data)
            {
                var update = new <#= componentNamespace #>.Update();
                var obj = data.GetFields();

<# foreach (var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.GetDeserializeDataIntoUpdateString("update." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
                return update;
            }

            public static <#= componentNamespace #>.Snapshot DeserializeSnapshot(global::Improbable.Worker.CInterop.SchemaObject obj)
            {
                var component = new <#= componentNamespace #>.Snapshot();

<# foreach (var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.GetDeserializeString("component." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
                return component;
            }

            public static void ApplyUpdate(global::Improbable.Worker.CInterop.SchemaComponentUpdate updateObj, ref <#= componentNamespace #>.Component component)
            {
                var obj = updateObj.GetFields();

<# foreach (var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.GetDeserializeUpdateString("component." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
            }

            public static void ApplyUpdate(global::Improbable.Worker.CInterop.SchemaComponentUpdate updateObj, ref <#= componentNamespace #>.Snapshot snapshot)
            {
                var obj = updateObj.GetFields();

<# foreach (var fieldDetails in fieldDetailsList) { #>
                <#= fieldDetails.GetDeserializeUpdateString("snapshot." + fieldDetails.PascalCaseName, "obj", 4) #>
<# } #>
            }
        }

        public struct Update : ISpatialComponentUpdate
        {
<# foreach(var fieldDetails in fieldDetailsList) { #>
            public Option<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>;
<# } #>
        }

        internal class <#= componentDetails.ComponentName  #>Dynamic : IDynamicInvokable
        {
            public uint ComponentId => <#= componentDetails.ComponentName  #>.ComponentId;

            internal static Dynamic.VTable<Update, Snapshot> VTable = new Dynamic.VTable<Update, Snapshot>
            {
                DeserializeSnapshot = DeserializeSnapshot,
                SerializeSnapshot = SerializeSnapshot,
                DeserializeSnapshotRaw = Serialization.DeserializeSnapshot,
                SerializeSnapshotRaw = Serialization.SerializeSnapshot,
                ConvertSnapshotToUpdate = SnapshotToUpdate
            };

            private static Snapshot DeserializeSnapshot(ComponentData snapshot)
            {
                var schemaDataOpt = snapshot.SchemaData;
                if (!schemaDataOpt.HasValue)
                {
                    throw new ArgumentException($"Can not deserialize an empty {nameof(ComponentData)}");
                }

                return Serialization.DeserializeSnapshot(schemaDataOpt.Value.GetFields());
            }

            private static void SerializeSnapshot(Snapshot snapshot, ComponentData data)
            {
                var schemaDataOpt = data.SchemaData;
                if (!schemaDataOpt.HasValue)
                {
                    throw new ArgumentException($"Can not serialise an empty {nameof(ComponentData)}");
                }

                Serialization.SerializeSnapshot(snapshot, data.SchemaData.Value.GetFields());
            }

            private static Update SnapshotToUpdate(in Snapshot snapshot)
            {
                var update = new Update
                {
<# foreach (var field in fieldDetailsList) { #>
                    <#= field.PascalCaseName #> = snapshot.<#= field.PascalCaseName #>,
<# } #>
                };

                return update;
            }

            public void InvokeHandler(Dynamic.IHandler handler)
            {
                handler.Accept<Update, Snapshot>(ComponentId, VTable);
            }
        }
    }
}
